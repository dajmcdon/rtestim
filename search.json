[{"path":"https://dajmcdon.github.io/rtestim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 rtestim authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dajmcdon.github.io/rtestim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel J. McDonald. Author, maintainer. Zhenglun Cai. Author. Jiaping Liu. Author.","code":""},{"path":"https://dajmcdon.github.io/rtestim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McDonald D, Cai Z, Liu J (2023). rtestim: Package (Title Case). R package version 0.0.0.9000, https://dajmcdon.github.io/rtestim/.","code":"@Manual{,   title = {rtestim: What the Package Does (Title Case)},   author = {Daniel J. McDonald and Zhenglun Cai and Jiaping Liu},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://dajmcdon.github.io/rtestim/}, }"},{"path":"https://dajmcdon.github.io/rtestim/index.html","id":"rtestim","dir":"","previous_headings":"","what":"What the Package Does (Title Case)","title":"What the Package Does (Title Case)","text":"goal rtestim …","code":""},{"path":"https://dajmcdon.github.io/rtestim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (Title Case)","text":"can install development version rtestim GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dajmcdon/rtestim\")"},{"path":"https://dajmcdon.github.io/rtestim/reference/configure_rt_admm.html","id":null,"dir":"Reference","previous_headings":"","what":"Rt estimation algorithm configuration — configure_rt_admm","title":"Rt estimation algorithm configuration — configure_rt_admm","text":"convert S3 method can pass vector counts rt_admm_configuration object (overwrite)","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/configure_rt_admm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rt estimation algorithm configuration — configure_rt_admm","text":"","code":"configure_rt_admm(   observed_counts,   degree,   weighted_past_counts = NULL,   primal_var = NULL,   auxi_var = NULL,   dual_var = NULL,   rho = -1,   rho_adjust = -1,   alpha = 0.5,   gamma = 0.9,   tolerance = 1e-04,   verbose = 0 )"},{"path":"https://dajmcdon.github.io/rtestim/reference/configure_rt_admm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rt estimation algorithm configuration — configure_rt_admm","text":"observed_counts vector observed daily infection counts degree Integer. Degree piecewise polynomial curve estimated. example, `degree = 1` corresponds piecewise constant curve. weighted_past_counts weighted sum past infections counts corresponding serial interval functions (Gamma approximation) weights primal_var initial values log(Rt) auxi_var auxiliary variable ADMM algorithm dual_var dual variable ADMM algorithm rho double. ADMM parameter; coefficient augmented term Lagrangian function. rho_adjust double. ADMM parameter; adjusted coefficient augmented term Lagrangian function. alpha Double. parameter adjusting upper bound line search algorithm `irls_admm` algorithm. gamma Double. parameter adjusting step size line search algorithm `irls_admm` algorithm. tolerance double. Tolerance ADMM convergence. verbose integer.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/configure_rt_admm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rt estimation algorithm configuration — configure_rt_admm","text":"list model parameters class `rt_admm_configuration`","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/cv_estimate_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Leave-kth-out cross validation for choosing a optimal parameter lambda — cv_estimate_rt","title":"Leave-kth-out cross validation for choosing a optimal parameter lambda — cv_estimate_rt","text":"Leave-kth-cross validation choosing optimal parameter lambda","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/cv_estimate_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leave-kth-out cross validation for choosing a optimal parameter lambda — cv_estimate_rt","text":"","code":"cv_estimate_rt(   observed_counts,   degree = 3L,   dist_gamma = c(2.5, 2.5),   nfold = 3,   error_measure = c(\"mse\", \"mae\", \"deviance\"),   x = NULL,   lambda = NULL,   ... )"},{"path":"https://dajmcdon.github.io/rtestim/reference/cv_estimate_rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leave-kth-out cross validation for choosing a optimal parameter lambda — cv_estimate_rt","text":"observed_counts vector observed daily infection counts degree Integer. Degree piecewise polynomial curve estimated. example, `degree = 1` corresponds piecewise constant curve. dist_gamma Vector length 2. shape scale assumed serial interval distribution. Roughly, distribution describes probability infectious individual infecting someone else period time become infectious. literature, assume interval follows gamma distribution shape scale. nfold Integer. number folds conduct leave-kth-cross validation. leave-kth-cross validation, every kth observed_counts corresponding position (evenly unevenly spaced) placed fold. first last observed_counts assigned folds. Smallest allowable value `nfold = 2`. error_measure Metric used calculate cross validation scores. Must choose `mse`, `mae`, `deviance`. `mse` calculates mean square error; `mae` calculates mean absolute error; `deviance` calculates deviance x vector positions counts observed. ideal case, observe data regular intervals (e.g. daily weekly) may always case. lambda Vector. user supplied sequence tuning parameters determines balance data fidelity smoothness estimated Rt; larger `lambda` results smoother estimate. default, `NULL` results automatic computation based `nlambda`, largest value `lambda` maximally smooth estimate, `lambda_min_ratio`. Supplying value `lambda` overrides behaviour. likely better supply decreasing sequence `lambda` values single (small) value. supplied, user-defined `lambda` sequence automatically sorted decreasing order. ... additional parameters passed `estimate_rt()` function","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/cv_estimate_rt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Leave-kth-out cross validation for choosing a optimal parameter lambda — cv_estimate_rt","text":"object S3 class `\"cv_result\"`. Among list components: * `full_fit` object S3 class `\"poisson_rt\"`, fitted `observed_counts` `lambda` * `cv_scores` leave-kth-cross validation scores * `cv_se` leave-kth-cross validation standard error * `lambda.min` lambda achieved optimal cross validation score * `lambda.1se` lambda gives optimal cross validation score within one standard error. * `lambda` value `lambda` used algorithm.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/cv_estimate_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Leave-kth-out cross validation for choosing a optimal parameter lambda — cv_estimate_rt","text":"","code":"y <- c(1, rpois(100, dnorm(1:100, 50, 15) * 500 + 1)) cv <- cv_estimate_rt(y, degree = 3, nfold = 3, nsol = 30) cv #> $full_fit #>  #> Call:  estimate_rt(observed_counts = observed_counts, degree = degree,   #>     x = x, lambda = lambda, nsol = 30) #>  #> Degree of the estimated piecewise polynomial curve: 3  #>  #> Summary of the 30 estimated models: #>           lambda index approx_dof niterations #> Min.        3.23     1          2        1197 #> 1st Qu.    29.84     8          2           3 #> Median    378.60    16          2           1 #> 3rd Qu.  3496.99    23          2          34 #> Max.    32300.65    30          1           3 #>  #>  #> $cv_scores #>  [1] 7.014070 6.766324 6.721610 6.716408 6.692913 6.694215 6.694603 6.697545 #>  [9] 6.717005 6.716881 6.703411 6.703740 6.705339 6.732389 6.768678 6.779830 #> [17] 6.780006 6.911783 6.912877 6.944743 7.152317 7.843435 7.843863 7.844102 #> [25] 7.844834 7.846267 7.849368 7.850509 8.256298 8.258609 #>  #> $cv_se #>  [1] 1.0266120 0.9751647 0.9587728 0.9639149 0.9489803 0.9434167 0.9431162 #>  [8] 0.9422573 0.9607684 0.9608925 0.9495084 0.9501036 0.9502666 0.9743828 #> [15] 1.0075238 0.9994685 0.9995241 1.0990733 1.1000150 1.0771623 0.9950165 #> [22] 0.7469918 0.7471880 0.7472206 0.7468228 0.7458124 0.7433452 0.7429615 #> [29] 1.1055153 1.1050696 #>  #> $lambda #>  [1]     3.230065     4.437540     6.096398     8.375376    11.506291 #>  [6]    15.807616    21.716879    29.835166    40.988260    56.310647 #> [11]    77.360907   106.280256   146.010344   200.592485   275.578729 #> [16]   378.596616   520.125040   714.560157   981.679747  1348.654996 #> [21]  1852.814327  2545.440411  3496.986608  4804.243416  6600.183926 #> [26]  9067.489735 12457.133167 17113.905973 23511.491266 32300.646178 #>  #> $lambda.min #> [1] 11.50629 #>  #> $lambda.1se #> [1] 1852.814 #>  #> $call #> cv_estimate_rt(observed_counts = y, degree = 3, nfold = 3, nsol = 30) #>  #> attr(,\"class\") #> [1] \"cv_poisson_rt\""},{"path":"https://dajmcdon.github.io/rtestim/reference/delay_calculator.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the total infectiousness at each observed time point. — delay_calculator","title":"Calculate the total infectiousness at each observed time point. — delay_calculator","text":"total infectiousness observed time point calculated \\(\\sum_{=1}^t I_{t-s}w_s\\), \\(\\) denotes vector containing observed case counts, \\(w\\) denotes serial interval distribution. serial interval distribution expresses probability symptom onset secondary infection occurred given number days primary infection","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/delay_calculator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the total infectiousness at each observed time point. — delay_calculator","text":"","code":"delay_calculator(observed_counts, x = NULL, dist_gamma = c(2.5, 2.5))"},{"path":"https://dajmcdon.github.io/rtestim/reference/delay_calculator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the total infectiousness at each observed time point. — delay_calculator","text":"observed_counts vector observed daily infection counts x vector positions counts observed. ideal case, observe data regular intervals (e.g. daily weekly) may always case. dist_gamma Vector length 2. shape scale assumed serial interval distribution. Roughly, distribution describes probability infectious individual infecting someone else period time become infectious. literature, assume interval follows gamma distribution shape scale.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/delay_calculator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the total infectiousness at each observed time point. — delay_calculator","text":"vector size n-1, containing total infectiousness   observed time point","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/delay_calculator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the total infectiousness at each observed time point. — delay_calculator","text":"","code":"delay_calculator(c(3,2,5,3,1), dist_gamma = c(2.5, 2.5)) #> [1] 3.000000 3.000000 2.767428 2.856849 3.126332"},{"path":"https://dajmcdon.github.io/rtestim/reference/discretize_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the discretized density function for gamma distribution — discretize_gamma","title":"Compute the discretized density function for gamma distribution — discretize_gamma","text":"serial interval distribution expresses probability symptom onset secondary infection occurred given number days primary infection. serial interval distribution commonly represented discretized Gamma distribution literature, parametrized shape scale parameters.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/discretize_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the discretized density function for gamma distribution — discretize_gamma","text":"","code":"discretize_gamma(x, shape = 2.5, scale = 2.5, rate = 1/scale)"},{"path":"https://dajmcdon.github.io/rtestim/reference/discretize_gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the discretized density function for gamma distribution — discretize_gamma","text":"x locations (times) cases observed. Must nonnegative. shape, scale shape scale parameters.  Must positive,     scale strictly. rate alternative way specify scale.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/discretize_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the discretized density function for gamma distribution — discretize_gamma","text":"probability mass discretized gamma distribution","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/discretize_gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the discretized density function for gamma distribution — discretize_gamma","text":"","code":"discretize_gamma(1:30, shape = 1, scale = 1) #>  [1] 6.321206e-01 2.325442e-01 8.554821e-02 3.147143e-02 1.157769e-02 #>  [6] 4.259195e-03 1.566870e-03 5.764193e-04 2.120528e-04 7.800987e-05 #> [11] 2.869823e-05 1.055749e-05 3.883883e-06 1.428801e-06 5.256264e-07 #> [16] 1.933671e-07 7.113580e-08 2.616940e-08 9.627183e-09 3.541643e-09 #> [21] 1.302898e-09 4.793093e-10 1.763280e-10 6.486744e-11 2.386347e-11 #> [26] 8.778756e-12 3.229639e-12 1.188050e-12 4.370948e-13 1.607603e-13"},{"path":"https://dajmcdon.github.io/rtestim/reference/estimate_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Rt using smoothness-penalized Poisson likelihood — estimate_rt","title":"Estimate Rt using smoothness-penalized Poisson likelihood — estimate_rt","text":"Effective Reproduction Number \\(R_t\\) infectious disease can estimated solving smoothness penalized Poisson regression form: \\(R_t = argmin_{\\theta} (\\frac{1}{n} \\sum_{=1}^n e^{\\theta_i} -   y_i\\theta_i) + \\lambda||D^{(k+1)}\\theta||_1\\) \\(y_i\\) observed case count day \\(\\), \\(\\theta_i = \\sum_{=1}y_{}w_{t-}\\) weighted past counts day \\(\\), \\(\\lambda\\) smoothness penalty, \\(D^{(k+1)}\\) \\((k+1)\\)-th order difference matrix.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/estimate_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Rt using smoothness-penalized Poisson likelihood — estimate_rt","text":"","code":"estimate_rt(   observed_counts,   degree = 3L,   dist_gamma = c(2.5, 2.5),   x = NULL,   lambda = NULL,   nsol = 100L,   lambdamin = NULL,   lambdamax = NULL,   lambda_min_ratio = 1e-04,   algo = c(\"linear_admm\", \"irls_admm\"),   maxiter = 10000,   init = NULL )"},{"path":"https://dajmcdon.github.io/rtestim/reference/estimate_rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Rt using smoothness-penalized Poisson likelihood — estimate_rt","text":"observed_counts vector observed daily infection counts degree Integer. Degree piecewise polynomial curve estimated. example, `degree = 1` corresponds piecewise constant curve. dist_gamma Vector length 2. shape scale assumed serial interval distribution. Roughly, distribution describes probability infectious individual infecting someone else period time become infectious. literature, assume interval follows gamma distribution shape scale. x vector positions counts observed. ideal case, observe data regular intervals (e.g. daily weekly) may always case. lambda Vector. user supplied sequence tuning parameters determines balance data fidelity smoothness estimated Rt; larger `lambda` results smoother estimate. default, `NULL` results automatic computation based `nlambda`, largest value `lambda` maximally smooth estimate, `lambda_min_ratio`. Supplying value `lambda` overrides behaviour. likely better supply decreasing sequence `lambda` values single (small) value. supplied, user-defined `lambda` sequence automatically sorted decreasing order. nsol Integer. number tuning parameters `lambda` compute Rt. lambdamin Optional value smallest `lambda` use. greater zero. lambdamax Optional value largest `lambda` use. lambda_min_ratio neither `lambda` `lambdamin` specified, program generate lambdamin lambdamax * lambda_min_ratio multiplicative factor minimal lambda `lambda` sequence, `lambdamin = lambda_min_ratio * lambdamax`. small value lead solution `Rt = log(observed_counts)`. argument effect user-defined `lambda` sequence. algo algorithm used computation. `linear_admm`: linearized ADMM; `irls_admm`: iteratively reweighted least squares standard ADMM. maxiter Integer. Maximum number iterations estimation algorithm. init list internal configuration parameters class `rt_admm_configuration`.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/estimate_rt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Rt using smoothness-penalized Poisson likelihood — estimate_rt","text":"object S3 class `poisson_rt`. Among list components: * `observed_counts` observed daily infection counts. * `x` vector positions counts observed. * `weighted_past_counts` weighted sum past infection counts. * `Rt` estimated effective reproduction rate. matrix     column corresponding one value `lambda`. * `lambda` value `lambda` actually used algorithm. * `degree` degree piecewise polynomial curve estimated. * `niter` required number iterations value `lambda` * `convergence` number iterations value `lambda` less     maximum number iterations estimation algorithm.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/estimate_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Rt using smoothness-penalized Poisson likelihood — estimate_rt","text":"","code":"y <- c(1, rpois(100, dnorm(1:100, 50, 15)*500 + 1)) out <- estimate_rt(y, nsol = 10) plot(out)   out0 <- estimate_rt(y, degree = 1L, nsol = 10) plot(out0)"},{"path":"https://dajmcdon.github.io/rtestim/reference/fill_case_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate case counts for uneven spaced time points — fill_case_counts","title":"Interpolate case counts for uneven spaced time points — fill_case_counts","text":"Given observation time points `x` observed case counts `observed_counts`, function finds minimal difference `m` consecutive `x` construct full even `x` difference `m`. function find missing index interpolate observed case counts using `na.fill` method argument `fill = \"extend\"`","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/fill_case_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate case counts for uneven spaced time points — fill_case_counts","text":"","code":"fill_case_counts(x, observed_counts)"},{"path":"https://dajmcdon.github.io/rtestim/reference/fill_case_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate case counts for uneven spaced time points — fill_case_counts","text":"x vector positions counts observed. ideal case, observe data regular intervals (e.g. daily weekly) may always case. observed_counts vector observed daily infection counts","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/fill_case_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate case counts for uneven spaced time points — fill_case_counts","text":"interpolated `observed_counts`","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/fill_case_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate case counts for uneven spaced time points — fill_case_counts","text":"","code":"x1 <- c(1,3,4,5,7,9) o1 <- 2*x1 filled_o1 <- fill_case_counts(x1, o1) o1_true <- 2*c(1:9) # o1_true should equal filled_o1"},{"path":"https://dajmcdon.github.io/rtestim/reference/fitted.cv_poisson_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted cv_poisson_rt — fitted.cv_poisson_rt","title":"Fitted cv_poisson_rt — fitted.cv_poisson_rt","text":"Fitted cv_poisson_rt","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/fitted.cv_poisson_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitted cv_poisson_rt — fitted.cv_poisson_rt","text":"","code":"# S3 method for cv_poisson_rt fitted(object, which_lambda = c(\"lambda.min\", \"lambda.1se\"), ...)"},{"path":"https://dajmcdon.github.io/rtestim/reference/fitted.cv_poisson_rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitted cv_poisson_rt — fitted.cv_poisson_rt","text":"object result cross validation type `cv_poisson_rt` which_lambda select Rt's output. provided, Rt's returned. provided list lambda,corresponding Rt estimation returned. provided string, must either one `lambda.min` `lambda.1se`. * provided `lambda.min`, return Rt generated  lambda minimizes cross validation score. * provided `lambda.1se`, return Rt generated lambda  whose corresponding cross validation score 1 standard error away  minimal cross validation score. ... used.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/fitted.cv_poisson_rt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitted cv_poisson_rt — fitted.cv_poisson_rt","text":"Rt's estimated provided lambda","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/fitted.cv_poisson_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitted cv_poisson_rt — fitted.cv_poisson_rt","text":"","code":"y <- c(1, rpois(100, dnorm(1:100, 50, 15) * 500 + 1)) cv <- cv_estimate_rt(y, degree = 3, nfold = 3, nsol = 30) f <- fitted(cv) f <- fitted(cv, which_lambda = cv$lambda[1]) f <- fitted(cv, which_lambda = \"lambda.1se\") f <- fitted(cv, which_lambda = NULL)"},{"path":"https://dajmcdon.github.io/rtestim/reference/fold_calculator.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function. Calculate the fold index for each `observed_counts` — fold_calculator","title":"Helper function. Calculate the fold index for each `observed_counts` — fold_calculator","text":"Helper function. Calculate fold index `observed_counts`","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/fold_calculator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function. Calculate the fold index for each `observed_counts` — fold_calculator","text":"","code":"fold_calculator(n, nfold)"},{"path":"https://dajmcdon.github.io/rtestim/reference/fold_calculator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function. Calculate the fold index for each `observed_counts` — fold_calculator","text":"n length sequence partition nfold Integer. number folds conduct leave-kth-cross validation. leave-kth-cross validation, every kth observed_counts corresponding position (evenly unevenly spaced) placed fold. first last observed_counts assigned folds. Smallest allowable value `nfold = 2`.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/fold_calculator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function. Calculate the fold index for each `observed_counts` — fold_calculator","text":"vector fold index counts distributed folds","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://dajmcdon.github.io/rtestim/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/plot.cv_poisson_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cv_poisson_rt — plot.cv_poisson_rt","title":"Plot cv_poisson_rt — plot.cv_poisson_rt","text":"Plot cv_poisson_rt","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/plot.cv_poisson_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cv_poisson_rt — plot.cv_poisson_rt","text":"","code":"# S3 method for cv_poisson_rt plot(x, which_lambda = c(\"cv_scores\", \"lambda.min\", \"lambda.1se\"), ...)"},{"path":"https://dajmcdon.github.io/rtestim/reference/plot.cv_poisson_rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cv_poisson_rt — plot.cv_poisson_rt","text":"x result cv_estimate_rt class `cv_poisson_rt` which_lambda select Rt's plot. provided, cross validation score plotted. provided list lambda, corresponding Rt estimation plotted. provided string, must either one `lambda.min`, `lambda.1se`, `cv_scores`. * provided `lambda.min`, plot Rt generated lambda  minimizes cross validation score. * provided `lambda.1se`, plot Rt generated lambda whose  corresponding cross validation score 1 standard error away  minimal cross validation score. * provided `cv_scores`, plot cross validation score. * NULL, estimated Rt values plotted. ... used.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/plot.cv_poisson_rt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot cv_poisson_rt — plot.cv_poisson_rt","text":"plot cv scores","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/plot.cv_poisson_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot cv_poisson_rt — plot.cv_poisson_rt","text":"","code":"y <- c(1, rpois(100, dnorm(1:100, 50, 15) * 500 + 1)) cv <- cv_estimate_rt(y, degree = 1, nfold = 3, nsol = 30) plot(cv)  plot(cv, which_lambda = cv$lambda[1])  plot(cv, which_lambda = \"lambda.min\")  plot(cv, which_lambda = \"lambda.1se\")  plot(cv, NULL)"},{"path":"https://dajmcdon.github.io/rtestim/reference/plot.poisson_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot estimated Rt values from a `poisson_rt` object — plot.poisson_rt","title":"Plot estimated Rt values from a `poisson_rt` object — plot.poisson_rt","text":"Produces figure showing estimated Rt values different values penalty. result [ggplot2::ggplot()]. Additional user modifications can added desired.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/plot.poisson_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot estimated Rt values from a `poisson_rt` object — plot.poisson_rt","text":"","code":"# S3 method for poisson_rt plot(x, lambda = NULL, ...)"},{"path":"https://dajmcdon.github.io/rtestim/reference/plot.poisson_rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot estimated Rt values from a `poisson_rt` object — plot.poisson_rt","text":"x output function [estimate_rt()] class `poisson_rt` lambda select Rt's plot. provided, Rt's plotted. ... used.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/plot.poisson_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot estimated Rt values from a `poisson_rt` object — plot.poisson_rt","text":"","code":"y <- c(1, rpois(100, dnorm(1:100, 50, 15)*500 + 1)) out <- estimate_rt(y, lambda = log(c(1.1,1.3,1.5))) plot(out)"},{"path":"https://dajmcdon.github.io/rtestim/reference/pred_kth_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function. Calculate Rt at hold-out set — pred_kth_rt","title":"Helper function. Calculate Rt at hold-out set — pred_kth_rt","text":"Helper function. Calculate Rt hold-set","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/pred_kth_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function. Calculate Rt at hold-out set — pred_kth_rt","text":"","code":"pred_kth_rt(rt, n, train_idx, test_idx, train_x, test_x)"},{"path":"https://dajmcdon.github.io/rtestim/reference/pred_kth_rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function. Calculate Rt at hold-out set — pred_kth_rt","text":"rt Matrix. Rt estimation observed time points training set values lambdas n Integer. Number total observations train_idx vector Integers. Index `observed_counts` `x` assigned training set test_idx vector Integers. Index `observed_counts` `x` assigned testing set train_x vector Integers. Location `observed_counts` training set test_x vector Integers. Location `observed_counts` testing set","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/pred_kth_rt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function. Calculate Rt at hold-out set — pred_kth_rt","text":"Predicted Rt hold-set","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/predict.cv_poisson_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict observed data using estimated Rt — predict.cv_poisson_rt","title":"Predict observed data using estimated Rt — predict.cv_poisson_rt","text":"Given object class `poisson_rt` produced [estimate_rt()], calculate predicted observed cases estimated Rt values. Note: function intended \"new x\" produce forecasts, rather examine Rt relates observables.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/predict.cv_poisson_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict observed data using estimated Rt — predict.cv_poisson_rt","text":"","code":"# S3 method for cv_poisson_rt predict(object, which_lambda = c(\"lambda.min\", \"lambda.1se\"), ...)"},{"path":"https://dajmcdon.github.io/rtestim/reference/predict.cv_poisson_rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict observed data using estimated Rt — predict.cv_poisson_rt","text":"object result cross validation type `cv_poisson_rt` which_lambda Select lambdas object use.   provided, Rt's returned. Note new lambdas originally   used estimation procedure may provided, results   calculated linearly interpolating estimated Rt's. strings `lambda.min` `lambda.1se` allowed choose either   lambda minimizes cross validation score largest lambda   whose corresponding cross validation score within 1 standard error   minimal cross validation score. ... used.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/predict.cv_poisson_rt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict observed data using estimated Rt — predict.cv_poisson_rt","text":"vector matrix predicted case counts.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/predict.cv_poisson_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict observed data using estimated Rt — predict.cv_poisson_rt","text":"","code":"y <- c(1, rpois(100, dnorm(1:100, 50, 15) * 500 + 1)) cv <- cv_estimate_rt(y, degree = 3, nfold = 3, nsol = 30) p <- predict(cv) p <- predict(cv, which_lambda = cv$lambda[1]) p <- predict(cv, which_lambda = \"lambda.1se\") p <- predict(cv, which_lambda = NULL) plot(y) matlines(p, lty = 2)"},{"path":"https://dajmcdon.github.io/rtestim/reference/predict.poisson_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict observed data using estimated Rt — predict.poisson_rt","title":"Predict observed data using estimated Rt — predict.poisson_rt","text":"Given object class `poisson_rt` produced [estimate_rt()], calculate predicted observed cases estimated Rt values. Note: function intended \"new x\" produce forecasts, rather examine Rt relates observables.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/predict.poisson_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict observed data using estimated Rt — predict.poisson_rt","text":"","code":"# S3 method for poisson_rt predict(object, lambda = NULL, ...)"},{"path":"https://dajmcdon.github.io/rtestim/reference/predict.poisson_rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict observed data using estimated Rt — predict.poisson_rt","text":"object object class `poisson_rt` produced [estimate_rt()]. lambda Select lambdas object use. provided (default), returned. Note new lambdas originally used estimation procedure may provided, results calculated linearly interpolating estimated Rt's. ... used.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/predict.poisson_rt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict observed data using estimated Rt — predict.poisson_rt","text":"vector matrix predicted case counts.","code":""},{"path":"https://dajmcdon.github.io/rtestim/reference/predict.poisson_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict observed data using estimated Rt — predict.poisson_rt","text":"","code":"y <- c(1, rpois(100, dnorm(1:100, 50, 15)*500 + 1)) out <- estimate_rt(y, nsol = 10) preds <- predict(out) plot(y) matlines(preds, lty = 1)"}]
